- 2. 화면 설계 -
1.( 소프트웨어 생명주기(SDLC) )은 는 시스템의 요구분석부터 유지보수까지 전 공정을 체계화한 절차/ 이다
2.( 폭포수 모델 )은 는 소프트웨어 개발시 각 단계를 확실히 마무리  지은 후에 다음 단계로 넘어가는 / 가장 오래된 생명주기 모델이다
3.( 나선형 모델 )은 는 시스템 개발 시 위험을 최소화하기 위해 점진적으로 완벽한 시스템으로 개발해 / 나가는 모델이다
4.( 소프트웨어 개발방법론 )은 는 소프트웨어 개발 전 과정에 지속적으로 적용할 수 있는 방법 절차/	, 	, 기법이다
5.( 구조적 방법론 )은 는 전체 시스템을 기능에 따라 나누어 개발하고 이를 통합하는 분할과 정복 접/	, 근 방식을 사용하는 방법론이다.
6.( 나씨 슈나이더만 차트- )은 는 구조적 프로그래밍 표현을 위해 논리의 기술에 중점을 둔 도형식 표/ 현 방법으로 연속 선택 반복 등의 제어 논리 구조로 표현한다, , 
7.( 애자일 방법론 )은 는 절차보다는 사람이 중심이 되어 변화에 유연하고 신소가게 적응하면서 효율/ 적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발방법론이다
8.( XP )은 는 의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 피드백으로 소프트웨어 품질을 / 높이기 위한 방법론으로 가지 가치와 5 12개의 실천항목이 존재한다
9.( 지속적인 통합(CI) )은 는 매일 여러 번씩 소프트웨어를 통합하고 빌드해야 한다는 원리이다/
10.( 메타포어 )은 는 / XP의 12가지 기본원리 중 하나로 공통적인 이름체계와 시스템 서술서를 통해 고 객과 개발자간의 의사소통을 원활하게 한다는 원리이다
11.( 테스트 기반 개발(TDD) )은 는 작성해야 하는 프로그램에 대한 테스트를 먼저 수행하고 이 테스/ 트를 통과할 수 있도록 실제 프로그램의 코드를 작성한다는 원리이다
12.( 리팩토링 )은 는 프로그램의 기능을 바꾸지 않으면서 중복제거 단순화 등을 위해 시스템 재구성한/	, 다는 원리이다
13.( 스크럼 )은 는 애자일 방법론 중 매일 정해진 시간 장소에서 짧은 시간의 개발을 하는 팀을 위한 / , 프로젝트 관리 중심 방법론이다
14.( 스프린터 )은 는 스크럼 방법론에서 / 2~4주의 짧은 개발 기간으로 반복적 수행으로 개발품질을 향 상시키는 프로젝트 수행법이다
15.( 번 다운 차트 )은 는 스크럼 방법론에서 남아있는 백로그 대비 시간을 그래픽적으로 표현한 차트/ 이다
16.( 델파이 기번 )은 는 비용산정 모형 중 하향식 산정방법이며 전문가의 경험적 지식을 통한 문제 해/	, 결 및 미래예측을 위한 기법이다
17.( LoC 모형 )은 는 소프트웨어 각 기능의 원시 코드 라인 수의 낙관치 중간치 비관치를 측정하여 /	, , 예측치를 구하고 이를 이용하여 비용을 산정하는 방식이다
18.( Man Month )은 는 한 사람이 개월동안 할 수 있는 일의 양을 기준으로 프로젝트 비용을 산정하/ 1 는 방식이다
19.( COCOMO 모형 )은 는 보헴/ (Bohem)이 제안한 모형으로 프로그램 규모에 따라 비용을 산정하는 방식으로 규모에 따라 유형이 조직형 반 분리형 임베디드형으로 나뉜다, , , 
20.( 푸트남 모형 )은 는 소프트웨어 개발 주기의 단계별로 요구할 인력의 분포를 가정하는 방식으로/	, 시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력분포도를 기초로 한다
21.( 기능 점수 모형(FP 모형) )은 는 요구 기능을 증가시키는 인자별로 가중치를 부여하고 요인별 가/	, 중치를 합산하여 총 기능의 점수를 계산하여 비용을 산정하는 방식이다.
22.( 주 공정법 )은 는 일정관리 모델 중에서 여러 작업의 수행 순서가 얽혀 있는 프로젝트의 일정을 / 계산하는 기법이며, 모든 자원 제약사항을 배제한 상태로 프로젝트의 시작과 끝을 나타내는 노드 (Node)와 노드 간을 연결을 통해 공정을 계산 하기 위한 액티비티(Activity)로 표기한다
23.( PERT )은 는 일정관리 모델 중에서 일의 순서를 계획적으로 정리하기 위한 수렴 기법으로 비관/ 치 중간치 낙관치의 점 추정방식을 통해 일정을 관리하는 기법이다, , 3
24.( 소프트웨어 아키텍처 )은 는 여러 가지 소프트웨어 구성요소와 그 구성요소가 가진 특성 중에서 / 외부에 드러나는 특성 그리고 구성요소 간의 관계를 표현하는 시스템의구조나 구조체이다, 
25.( 파이프 필터 패턴-	 )은 는 소프트웨어 아키텍처 패턴 유형 중 하나로 데이터 스트림을 생성하고 처/ 리하는 ㅌ시스템에서 사용 가능한 패턴이다
26.( ATAM )은 는 소프트웨어 아키텍처 비용 평가 모델 중 하나로 아키텍처 품질 속성을 만족시키는/ 지 판단 및 품질 속성들의 이해 상충관계까지 평가하는 모델이다
27.( CBAM )은 는 소프트웨어 아키텍처 비용 평가 모델 중 하나로 /	ATAM 바탕의 시스템 아키텍처 분 석 중심으로 경제적 의사결정에 대한 요구를 충족하는 비용 평가 모델이다
28.( 디자인 패턴 )은 는 소프트웨어 공학의 소프트웨어 설계에서 공통으로 발생하는 문제에 대해 자주 / 쓰이는 설계 방법을 정리한 패턴이다
29.( 빌더 패턴(Builder Pattern) )은 는 생성 패턴 중 하나로 복잡한 인스턴스를 조립하여 반드는 구조/ 로 복합 객체를 생성할 때 객체를 생성하는 방법 과정 과 객체를 구현 표현 하는 방법을 분리함으로, ( ) ( ) 써 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있는 디자인 패턴이다
30.( 프로토타입 패턴(Prototype Pattern) )은 는 생성 패턴 중 하나로 처음부터 일반적인 원형을 만들/ 어 놓고 그것을 복사한 후 필요한 부분만 수정하여 사용하는 패턴으로 생성할 객체의 원형을 제공하, 	, 는 인스턴스에서 생성할 객체들의 타입이 결정되도록 설정하며 객체를 생성할 때 갖추어야 할 기본 , 형태가 있을때 사용되는 디자인 패턴이다
31.( 팩토리 메서드 패턴(Factory Method Pattern) )은 는 생성 패턴 중 하나로 상위 클래스에서 객체/ 를 생성하는 인터페이스를 정의하고 하위 클래스에서 인스턴스를 생성하도록 하는 방식으로 상위 클, 	, 래스에서는 인스턴스를 만드는 방법만 결정하고 하위 클래스에서 그 데이터의 생성을 책임지고 조작, 하는 함수들을 오버로딩하여 인터페이스와 실제 객체를 생성하는 클래스를 분리할 수 있는 특성을 갖 는 디자인 패턴이다
32.( 싱글톤 패턴(Singleton Pattern) )은 는 생성 패턴 중 하나로 전역 변수를 사용하지 않고 객체를 / 하나만 생성하도록 하며 생성된 객체를 어디에서든지 참조할 수 잇도록 하는 디자인 패턴이다, 
33.( 브리지 패턴(Bridge Pattern) )은 는 구조 패턴 중 하나로 기능의 클래스 계층과 구현의 클래스 계/ 층을 연결하고 구현부에서 추상 계층을 분리하여 추상화된 부분과 실제 구현 부분을 독립적으로 확, 장할 수 있는 디자인 패턴이다
34.( 퍼사이드 패턴(Facade Pattern) )은 는 구조 패턴 중 하나로 복잡한 시스템에 대하여 단순한 인터/ 페이스를 제공함으로써 사용자와 시스템 간 또는 여타 시스템과의 결합도를 낮추어 시스템 구조에 대 한 파악을 쉽게하는 패턴으로 오류에 대해서 단위별로 확인할 수 있게 하며 사용자의 측면에서 단순, 한 인터페이스 제공을 통해 접근성을 높일 수 있는 디자인 패턴이다 
35.( 어댑터 패턴(Adapter Pattern) )은 는 구조 패턴 중 하나로 기존 생성된 클래스를 재사용할 수 있/ 도록 중간에서 맞춰주는 역할을 하는 인터페이스를 만드는 패턴으로 상속을 이용하는 클래스 패턴과 , 위임을 이용하는 인스턴스 패턴의 두 가지 형태로 사용되는 디자인 패턴이다 
36.( 템플릿 메서드 패턴(Template Method Pattern) )은 는 행위 패턴 중 하나로 어떤 작업을 처리하/ 는 일부분을 서브 클래스로 캡슐화해 전체 일을 수행하는 구조는 바꾸지 않으면서 특정 단계에서 수 행하는 내역을 바꾸는 패턴으로 일반적으로 상위 클래스 추상 클래스 에는 추상 메서드를 통해 기능( ) 의 골격을 제공하고 하위 클래스 구체 클래스 의 메서드에는 세부 처리를 구체화하는 방식으로 사용, ( ) 하며 코드 양을 줄이고 유지보수를 용이하게 만드는 특징을 갖는 디자인 패턴이다
37.( 커맨드 패턴(Command Pattern) )은 는 행위 패턴 중 하나로 실행될 기능을 캡슐화함으로써 주어/ 진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴으로 하나의 추상 클래스에 메서드를 만들어 각 명령이 들어오면 그에 맞는 서브클래스가 선택되어 실행되는 특징을 갖는 디자인 패턴이다
38.( 옵저버 패턴(Observer Pattern) )은 는 행위 패턴 중 하나로 한 객체의 상태가 바뀌면 그 객체에 / 의존하는 다른 객체들에 연락이 가고 자동으로 내용이 갱신되는 방법으로 일 대 다의 의존성을 가지 며 상호작용하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인 패턴이다.
39.( 전략 패턴(Strategy Pattern) )은 는 행위 패턴 중 하나로 알고리즘 군을 정의하고 추상 클래스/ ( ) 같은 알고리즘을 각각 하나의 클래스로 캡슐화한 다음 필요할 때 서로 교호나해서 사용할 수 있게 , 하는 패턴으로 행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 디자인 패, 턴이다
40.( 운영체제(OS) )은 는 컴퓨터 시스템이 제공하는 모든 하드웨어 소프트웨어를 사용할 수 있도록 /	, 해주고 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스를 담당하는 프로그램으로 사용자가 컴퓨, 	, 터를 좀 더 쉽게 사용하기 위해 지원하는 소프트웨어이다.
41.( 네트워크(Network) )은 는 컴퓨터 장치들의 노드 간 연결 데이터 링크 을 사용하여 서로에게 데/ ( ) 이터를 교환 할 수 있도록 하는 기술이다
42.( 응용 계층 )은 는 / OSI 7계층 중 하나로 사용자와 네트워크 간 응용 서비스 연결 데이터를 생성하, 는 계층이며 대표적인 프로토콜로는 , HTTP, FTP가 있다
43.( 전송 계층 )은 는 / OSI 7계층 중 하나로 신뢰성 있는 통신을 보장하고 데이터 분할과 재조립 흐름, , 제어 오류제어 혼잡제어 등을 담당하는 계층이며 대표적인 프로토콜에는 , , , TCP,UDP가 있다
44.( 네트워크 계층 )은 는 / OSI 7계층 중 하나로 단말 간 데이터 전송을 위한 최적화된 경로를 제공하 는 계층이며 대표적인 프로토콜로는 , IP,ICMP가 있다
45.( 데이터 링크 계층 )은 는 / OSI 7계층 중 하나로 인접 시스템 간 데이터 전송 전송오류 제어 동기, , 화 흐름제어 등의 전송 기능을 제공하는 계층이며 대표적인 프로토콜은 이더넷이다, 	, 
46.( 물리 계층 )은 는 / OSI 7계층 중 하나로 과 의 비트 정보를 회선에 보내기 위한 전기적 신호로 0 1 변환하는 계층이며 대표적인 프로토콜은 , RS-232C이다
47.( 백본망(Backbone Network) )은 는 다양한 네트워크를 상호 연결하는 컴퓨터 네트워크의 일부로/ 서 각기 다른 , LAN이나 부분망 간에 정보를 교환하기 위한 경로를 제공하는 망이다
48.( 라우터(Router) )은 는 계층 데이터 패킷을 발신지에서 목적지까지 전달하기 위해 최적의 경로를 / 3 지정하고 이 경로를 따라 데이터 패킷을 다음 장치로 전달하는 네트워크 장비이다, 
49.( 스위치(Switch) )은 는 계층 장비로서 동일 네트워크 내에서 출발지에 들어온 데이터 프레임을 / 2 , 목적지 MAC 주소 기반으로 빠르게 전달하는 네트워크 장비이다
50.( 게이트웨이(Gateway) )은 는 컴퓨터 네트워크에서 서로 다른 통신망 프로토콜을 사용하는 네트워/	, 크 간의 통신을 가능하게 하는 네트워크장비이다
51.( 방화벽(Firewall) )은 는 외부로부터 불법침입과 내부의 불법 정보 유출을 방지하고 내외부 네트/	, 워크의 상호간 영향을 차단하기 위한 보안 시스템이다
52.( DBMS )은 는 데이터베이스라는 데이터의 집합을 만들고 저장 및 관리할 수 있는 기능들을 제공/ , 하는 응용 프로그램이다
53.( 미들웨어 )은 는 분산 컴퓨팅 환경에서 응용 프로그램고 ㅏ프로그램이 운영되는 환경 간에 원만한 / 통신이 이루어질 수 있도록 제어해주는 소프트웨어로 운영체제와 소프트웨어 애플리케이션 사이에 , 있다
54.( 앱 애플리케이션 서버(WAS) )은 는 서버계층에서 애플리케이션이 동작할 수 있는 환경을 제공하/ 고 안정적인 트랜잭션 처리와 관리 다른 이기종 시스템과의 애플리케이션 연동을 지원하는 서버이다, 	, 
55.( 가비지 컬렉션(GC) )은 는 메모리 관리 기법의 하나로 프로그램이 동적으로 할당했던 메모리 영/ , 역 중에서 필요 없게 된 영역을 해제하는 기능이다
56.( 총소유 비용(TCO) )은 는 기업이 시간 경과에 따라 지불해야 하는 컴퓨팅 비용을 통합적 관점에/ 서 직접 비용뿐 아니라 이와 관련된 숨겨진 비용까지 포함하여 파악하는 기법이다
57.( 요구공학 )은 는 사용자의 요구가 반영된 시스템을 개발하기 위하여 사용자 요구사항에 대한 도출/	, 분석 명세 확인 및 검증하는 구조화된 활동이다, 	, 
58.( 기능적 요구사항 )은 는 시스템이 제공하는 기능 서비스에 대한 요구사항으로 특정 입력에 대해 / , , 시스템이 어떻게 반응해야 하는지에 대해 기술한다
59.( 비기능적 요구사항 )은 는 시스템이 수행하는 기능 이외의 사항 시스템 구축에 대한 제약사항에 / , 관한 요구 사항으로 품질 속성에 관련하여 시스템이 갖춰야 할 사항에 관하여 기술한다, 
60.( 브레인스토밍(Brainstorming) )은 는 말을 꺼내기 쉬운 분위기로 만들어 회의 참석자들이 내놓은 / 아이디어들을 비판 없이 수용할 수 있도록 하는 회의이다
61.( 롤 플레잉(Role Playing) )은 는 현실에 일어나는 장면을 설정하고 여러 사람이 각자가 맡은 역을 / 연기함으로써 요구사항을 분석하고 수집하는 방식이다
62.( 워크숍(Workshop) )은 는 단기간의 집중적인 노력을 통해 다양하고 전문적인 정보를 획득하고 공/ 유하는 방법으로 프로젝트에 참여하는 모든 핵심 인물의 참여가 필요하고 참석자들은 해당 전문 영, 역별로 팀 협력이 필요하며 사전 준비가 요구된다
63.( 데이터 흐름도(DFD) )은 는 데이터가 각 프로세스를 따라 흐르면서 변환되는 모습을 나타낸 그림/ 으로 시스템 분석과 설계에서 매우 유용하게 사용되는 다이어그램이다, 
64.( 자료 사전(DD) )은 는 자료 요소 자료 요소들의 집합 자료의 흐름 자료저장소의 의미와 그들 간/	, 	, 	, 의 관계 값 범위 단위들을 구체적으로 명시하는 사전이다, 	, 
65.( UML )은 는 객체지향 소프트웨어 개발 과정에서 산출물을 명세화 시각화 문서화 할 시 사용되는 /	, 	, 모델링 기술과 방법론을 통합해 만든 표준화된 범용 모델링이다
66.( 비정형 명세 기법 )은 는 명세 기법 중에서 사용자의 요구를 표현할 때 자연어를 기반으로 서술하/ 는 기법으로 사용자와 개발자의 이해가 용이하지만 명확성 및 검증에 문제가 있다, 
67.( 정형 명세 기법 )은 는 사용자의 요구를 표현할 때 수학적인 원리와 표기법으로 서술하는 기법으/	, 로 Z-스키마,Petri Nets, 상태 차트를 활용하여 표현한다
68.( 인스펙션 )은 는 정형 기술 검토 기법 중 소프트웨어 요구 설계 원시 코드 등의 저작자 외의 다/	, 	, 른 전문가 또는 팀이 검사하여 문제를 식별하고 문제에 대한 올바른 해결을 찾아내는 형식적인 검토 기법이다
69.( 워크 스루 )은 는 정형 기술 검토 기법 중 검토 자료를 회의 전에 배포해서 사전 검토한 후 짧은 / 시간 동안 회의를 진행하는 형태로 리뷰를 통해 문제 식별 대안 조사 개선 활동 학습 기회를 제공, , , 하는 가장 비형식적인 검토 기법이다
70.( 감사 )은 는 소프트웨어 제품 및 프로세스가 규제 표준 가이드라인 계획 절차를 준수하고 있는지/	, 	, 	, 를 독립적으로 평가하는 기법으로 소프트웨어 제품의 제공자 소비자 제 기관이 수행한다, 	, 	3
