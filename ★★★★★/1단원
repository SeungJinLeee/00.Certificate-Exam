1.소프트웨어 생명주기(SDLC)=>소프트웨어 생명주기는 시스템의 요구분석부터 유지보수까지 전 공정을 체계화한 절차
  -소프트웨어 생명주기 모델의 종류(폭프나반)
      1]폭포수 모델:소프트웨어 개발시 각 단계를 확실히 마무리 지은 후 다음단계로 넘어가는 모델
                    가장 오래된 모델
                    선형 순차적 모형으로 고전적 생명주기 모형
                    성공 사레가 많음
                    요구사항 변경이 어려움
           절차:타당성 검토->계획->요구사항 분석->설계->구현-테스트->유지보수
      2]프로토타이핑 모델:고객이 요구한 주요 기능을 프로토타입으로 구현, 고객의 피드백을 반영
      3]나선형 모델:시스템 개발 시 위험을 최소화하기 위해 점진적으로 완벽한 시스템으로 개발해 나가는 모델
          절차:계획 및 정의->위험 분석->개발->고객 평가(계위개고)
        
2.소프트웨어 개발방법론 종류
    1]구조적 방법론:전체 시스템을 기능에 따라 나누어 개발하고, 분할과 정복 접근 방식의 방법론
                    하향식 방법론
                    나씨-슈나이더만(Nassi-Shneiderman)차트 사용
    2]정보공학 방법론:정보시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론
                      개발주기를 이용해 대형 프로젝트를 수행하는 체계적인 방법론
    3]객체지향 방법론:'객체'라는 기본 단위로 시스템을 분석 및 설계하는 방법론
    4]컴포넌트 기반 방법론:소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론
                          개발 기간 단축으로 인한 생산성 향상
                          새로운 기능 추가 쉬움
                          소프트웨어 재사용이 가능
    5]애자일 방법론:절차보다는 사람이 중심
                    개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
                    개발 기간이 짧고 신속하며, 폭포수 모형에 대비되는 방법론으로 개발과 함께 즉시 피드백을 받아서 유동적으로 개발할 수 있다
                    유형:XP,린,스크럼
                    XP:의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기 위한 방법론
                    XP 5가지 가치:용기,단순성,의사소통,피드백,존중
                    XP 12가지 기본원리:짝프로그래밍,공동 코드 소유,지속적인 통합,계획 세우기,작은 릴리즈,메타포어,간단한 디자인,테스트기반 개발
                                        리팩토링,40시간 작업,고객 상주,코드 표준
                    스크럼:매일 정해진 매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론
                          백로그,스프린트,스크럼 미팅,스크럼 마스터,스프린트 회고,번 다운 차트
                    린:도요타의 린 시스템 품질기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 품질을 향상시킨 방법론
                       JIT,칸반 보드 사용
                       원칙:낭비제거,품질 내재화,지식 창출,늦은 확정,빠른 인도,사람존중,전체 최적화
                       
3.비용 산정, 일정관리 모형
  비용산정 모형:하향식 산정방법:경험이 많은 전문가에게 비용 산정을 의뢰하거나 여러 전문가와 조정자를 통해 산정하는 방식
                전문가 판단,델파이 기법
                상향식 산정비법:세부적인 요구사항과 기능에 따라 필요한 비용을 계산하는 방식
                코드 라인 수(LOC),Man Month,COCOMO 모형,푸트남 모형,기능점수(FP)모형
                    1]LOC모형:소프트웨어 각 기능의 원시 코드 라인 수의 낙관치,중간치,비관치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 방식
                              측정이 쉽고 이해하기 쉬워 많이 사용한다
                    2]Man Month 모형은 한 사람이 1개월 동안 할 수 있는 일의 양을 기준으로 프로젝트 비용을 산정하는 방식
                        Man Month= LoC/프로그래머의 월간 생산성
                        프로젝트기간=Man Month/프로젝트인력
                    3]COCOMO모형: 보헴이 제안한 모형으로 프로그램 규모에 따라 비용을 산정하는 방식
                                  비용산정 결과는 프로젝트를 완성하는 데 필요한 노력(Man Month)으로 산정한다
                                  규모에 따라 조직형(5만라인 이하)<반분리형(30만이하)<임베디드형
                    4]푸트남 모형:소프트웨어 개발주기의 단계별로 요구할 인력의 분포를 가정하는 방식
                                  푸트남이 제안한 것으로 생명주기 예측 모형
                                  시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력 분포도를 기초
                    5]기능점수(FP)모형:요구 기능을 증가시키는 인자별로 가중치를 부여하고, 요인별 가중치를 합산하여 총 기능의 점수를 계산하여 비용을 산정하는 방식
  일정관리 모델:주 공정법,PERT,주요 연쇄 프로젝트 관리
                주공정법(CPM):여러 작업의 수행순서가 얽혀 있는 프로젝트의 일정을 계산하는 기법
                              임계경로(Critical Path) 제일 오래걸리는 경로
                PERT:일의 순서를 계획적으로 정리하기 위한 수렴기법으로 비관치,주관치,낙관치의 3점 추정방식을 통해 일정을 관리하는 기법
                주요연쇄프로젝트 관리: 주공정 연쇄법으로 자원제약사항을 고려하여 일정을 작성하는 기법
                
4.현행시스템 파악 절차
    1단계:구성/기능/인터페이스 파악:시스템구성 현황 파악,시스템 기능 파악,시스템 인터페이스 현황 파악
    2단계:아키텍처 및 소프트웨어 구성 파악:아키텍처 파악,소프트웨어 구성 파악
    3단계:하드웨어 및 네트워크 구성 파악:시스템 하드웨어 현황 파악,네트워크 구성 파악
    
5.소프트웨어 아키텍처:여러가지 소프트웨어 구성요소와 그가가진 특성중에서 외부에 드러나는 특성, 관계를 표현하는 시스템의 구조나 구조체이다
      소프트웨어 아키텍처 4+1뷰 개념
      유스케이스 뷰,논리 뷰, 프로세스 뷰,구현 뷰, 배치 뷰(유논프구배)
        1]유스케이스 뷰:유스케이스 또는 아키텍처를 도출하고 설계하며 다른 뷰를 검증하는 데 사용되는 뷰/사용자,설계자,개발자,테스트 관점
        2]논리 뷰:시스템의 기능적인 요구사항이 어떻게 제공되는지 설명해주는 뷰
        3]프로세스 뷰 :시스템의 비기능적인 속성으로서 자원의 효율적인 사용,병행,실행,비동기,이벤트 처리등을 표현한 뷰
        4]개발 환경 안에서 정적인 소프트웨어 모듈의 구성을 보여주는 뷰
        5]컴포넌트가 물리적인 아키텍처에 어떻게 배치되는가를 매핑해서 보여주는 뷰
      패턴유형:계층화 패턴, 클라이언트-서버패턴,파이프-필터패턴,브로커패턴,MVC패턴
      소프트웨어 아키텍처 비용평가 모델:SAAM,ATAM,CBAM,ADR,ARID(SACAA)
        1]SAAM:변경 용이성과 기능성에 집중, 평가가 용이하여 경험이 없는 조직에서도 활동 가능한 비용 평가 모델
        2]ATAM:아키텍처 품질 속성을 만족시키는지 판단 및 품질 속성들의 이해 상충관계까지 평가하는 모델
        3]CBAM:ATAM 바탕으로 시스템 아키텍처 분석 중심으로 경제적 의사결정에 대한 요구를 충족하는 비용평가 모델
        4]ADR:소프트웨어 아키텍처 구성요소간 응집도를 평가하는 모델
        5]ARID:전체 아키텍처가 아닌 특정부분에 대한 품질요소에 집중하는 비용평가 모델
        
5.디자인 패턴유형
  목적:생성,구조,행위(생구행
  범위:클래스,객체
  
  생성:생빌 프로 팹앱싱
  구조:구 브데 퍼플 프록 컴 어
  행위:행 미인이 텝옵 스테 비커 스트 메체
  
6.운영체제:PC,모바일
  PC:윈도즈,유닉스,리눅스
  모바일:안드로이드(리눅스기반),IOS
  
7.OSI 7계층:(아파서티나다피/비프패세데데데)
  1]응용계층(Application)/사용자와 네트워크 간 응용서비스 연결,데이터 생성/HTTP,FTP/데이터(Data)/호스트(PC등)
  2]표현계층(Presentation)/데이터 형식설정,부호교환,암복호화/JPEG,MPEG/데이터(Data)/호스트(PC등)
  3]세션계층(Session)/송수신간의 논리적인 연결, 연결접속,동기제어/RPC,NetBIOS/데이터(Data)/호스트(PC등)
  4]전송계층(Transport)/송수신 프로세스간의 연결,신뢰성있는 통신보장,데이터분할 재조립 흐름제어 오류제어 혼잡제어/TCP,UDP/세그먼트(Segment)/L4스위치
  5]네트워크계층(Network)/단말기 간 데이터 전송을 위한 최적화된 경로 제공/IP,CMP/패킷(Packet)/라우터
  6]데이터링크계층(Data Link)/인접 시스템 간 데이터 전송 전송오류 제어, 동기화 오류제어 흐름제어 회선제어/HDLC,PPP/프레임(Frame)/브리지,스위치
  7]물리계층(Physical)/0과1의 비트 정보를 회선에 보내기 위한 전기적 신호 변환/PS-232C/비트(Bit)/허브,리피트

8.DBMS 현행 시스템 분석시 고려사항
  가용성,성능,상호 호환성,기술지원,구축 비용(가성호기구)
  
9.미들웨어:분산 컴퓨팅 환경에서 응용 프로그램과 프로그램이 운영되는 환경 간에 원만한 통신이 이루어질 수 있도록 제어해주는 소프트웨어이다(ex:WAS)
    WAS(웹 애플리케이션 서버):서버 계층에서 애플리케이션이 동작할 수 있는 환경을 제공하고 안정적인 트랜잭션 처리와 관리,
    다른 기종 시스템과의 애플리케이션 연동을 지원하는 서버
   
10.요구사항 개발 단계 구성
   요구사항 도출,분석,명세,확인및 검증(도분명확)
   도출:고객의 요구사항을 정보를 식별 및 수집방법 결정, 수집된 요구사항을 구체적으로 표현
   분석:충돌,중복,누락 분석
   명세:검토,평가,승인 문서작성
   확인 및 검증:분석가가 요구사항을 이해했는지 확인,적합한지,일관성있는지 검증

11. 요구사항 도출 기법
      인터뷰,브레인스토밍,델파이기법(전문가의 경험적 지식을 통한 문제해결 및 미래예측),롤 플레잉,워크숍,설문조사
    요구사항 분석 기법
      자료흐름지향 분석(데이터 흐름도,자료사전), 객체지향 분석(UML)
    요구사항 명세 기법(산출물:요구사항 명세서)
       비정형:자연어(일상어)를 기반으로 서술, 이해하지만 명확성및 검증에 문제
       정형:수학적인 원리와 표기법으로 서술/z-스키마,Petri Nets,상태차트,간결하지만 이해가 어려움
     -명세원리 및 검증항목:명확성,완전성,검증가능성,일관성,수정 용이성,추적 가능성,개발 후 이용성(명완검 일수 추개)
    요구사항 확인 및 검증 주요기법
       검토,정형 기술 검토 활용(동료 검토(2~3인 리뷰), 워크스루(회의전 간단한 확인),인스펙션(다른 전문가팀이 검사하여 오류를 찾아내는 방식)),
       프로토타이핑 활용,모델검증,테스트케이스,CASE도구 활용,베이스 라인,요구사항 추적표
       
 
